logging.level.fr.volkaert = DEBUG

# Server port, application name and instance id of this component/module
server.port = ${PORT:0}
spring.application.name = PulsarSubscriptionManager
spring.application.instance_id = ${INSTANCE_ID:${random.value}}

# Cluster size is the number of PulsarSubscriptionManager instances and Cluster index is the index of this
# PulsarSubscriptionManager instance within the cluster.
# Cluster index must  be ***UNIQUE*** within the cluster and must follow the sequence 0, 1... < Cluster size.
# The PulsarSubscriptionManager instance in charge of the management of an event is the instance that meets the
# criteria 'broker.cluster-index == (sum-of-the-ascii-codes-of-the-chars-of-event-type-code % broker.cluster-size)'.
# For a given event type, only one instance of PulsarSubscriptionManager will manage the events.
broker.cluster-size = ${CLUSTER_SIZE:1}
broker.cluster-index = ${CLUSTER_INDEX:0}

# Config for Apache Pulsar
broker.pulsar-service-url = pulsar://localhost:6650
broker.pulsar-listener-thread-count = 25

# URL and credentials to call the Catalog
broker.catalog-url = lb://Catalog
broker.auth-client-id-for-catalog = some-client-id-for-catalog
broker.auth-client-secret-for-catalog = some-client-secret-for-catalog

# URL and credentials to call the Subscription Adapter
broker.subscription-adapter-url = lb://StandardSubscriptionAdapter
broker.auth-client-id-for-subscription-adapter = some-client-id-for-subscription-adapter
broker.auth-client-secret-for-subscription-adapter = some-client-secret-for-subscription-adapter

# Timeouts to connect and read the webhooks
broker.connect-timeout-in-seconds-for-subscription-adapter = 2
# Pay attention: the broker.read-timeout-in-seconds-for-subscription-adapter must LONGER than the broker.read-timeout-in-seconds-for-webhooks of the Subscription Adapter module
broker.read-timeout-in-seconds-for-subscription-adapter = 35

# Time to live for webhook errors
broker.default-time-to-live-in-seconds-for-webhook-connection-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-read-timeout-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-server5xx-error = 60
broker.default-time-to-live-in-seconds-for-webhook-client4xx-error = 60
broker.default-time-to-live-in-seconds-for-webhook-auth401or403-error = 60

# Eureka Service Discovery
eureka.client.serviceUrl.defaultZone = http://localhost:8761/eureka/
#eureka.client.healthcheck.enabled = true
eureka.client.registryFetchIntervalSeconds = 10
eureka.client.initialInstanceInfoReplicationIntervalSeconds = 30
eureka.client.instanceInfoReplicationIntervalSeconds = 10
eureka.instance.instance-id = ${spring.cloud.client.hostname}:${spring.application.name}:${spring.application.instance_id}
eureka.instance.leaseRenewalIntervalInSeconds = 5
eureka.instance.leaseExpirationDurationInSeconds = 10
spring.cloud.loadbalancer.ribbon.enabled = false

# Actuator endpoints (including liveness et readiness probes)
management.endpoints.web.exposure.include = *
management.endpoint.health.show-details = always
management.endpoint.health.show-components = always
#management.health.probes.enabled = true
#management.endpoint.health.group.liveness.include = livenessState,subscriptionManagerLiveness
#management.endpoint.health.group.readiness.include = readinessState,subscriptionManagerReadiness
#management.endpoint.health.roles = PROBES

# Useful for metrics (to group them by component type)
broker.component-type-name = ${spring.application.name}
# Useful for metrics (to distinguish instances of the same component type)
broker.component-instance-id = ${spring.application.instance_id}

# Graceful Shutdown (requires Spring Boot >= 2.3.x)
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=5s


server.port = 8083

logging.level.fr.volkaert = DEBUG

broker.pulsar-service-url = pulsar://localhost:6650

# Useful for metrics (to group them by component type)
broker.component-type-name = PulsarPublicationManager

# Useful for metrics (to distinguish instances of the same component type)
broker.component-instance-id = ${broker.component-type-name}-localhost-${server.port}

broker.catalog-url = http://localhost:8089/catalog

# Actuator endpoints
management.endpoints.web.exposure.include=*



broker.catalog-file = catalog.json

# Use Synchronous delivery instead of a more classic Asynchronous delivery
broker.synchronous-delivery = false

# In case of a successful synchronous delivery, what should be the HTTP status code returned to the Publisher ? 200 OK or 202 ACCEPTED ?
broker.status-code-for-successful-synchronous-delivery = 200

# Default time to live for an event is 10 days (10*24*60*60)
broker.default-time-to-live-in-seconds = 864000

# Max time to live for an event is 10 days (10*24*60*60)
broker.max-time-to-live-in-seconds = 864000

# Warning limit for high publication rate (0 to disable the limit)
broker.warning-threshold-per-publication-code = 0
#broker.warning-threshold-per-publication-code = 50

# Throttling limit (0 to disable the limit)
broker.throttling-threshold-per-publication-code = 0
#broker.throttling-threshold-per-publication-code = 200
broker.pause-in-milliseconds-for-throttling = 20

# Rate limit (0 to disable the limit)
broker.rejecting-threshold-per-publication-code = 0
#broker.rejecting-threshold-per-publication-code = 500

# Limits of alerts in memory (to prevent from exhausting memory)
broker.max-alerts-in-memory = 10000
broker.max-severe-alerts-in-memory = 2000
broker.max-critical-alerts-in-memory = 1000

# Timeouts to connect and read the webhooks
broker.webhook-connect-timeout-in-seconds = 2
broker.webhook-read-timeout-in-seconds = 10

broker.default-time-to-live-in-seconds-for-webhook-connection-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-read-timeout-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-server5xx-error = 864000
broker.default-time-to-live-in-seconds-for-webhook-client4xx-error = 60

# In case of redelivery attempt, limit the exponential backoff to 1h
broker.max-retry-backoff-in-seconds = 3600

# Default time to wait pending deliveries in case of a shutdown
broker.default-shutdown-timeout-in-seconds = 30

# Max size to event publication is 1MB (returned http status code will be 413 - Request Entity Too Large - if the request size exceeds the limit)
quarkus.http.limits.max-body-size = 1M



quarkus.shutdown.timeout = 60

quarkus.smallrye-metrics.path = /openmetrics
quarkus.smallrye-metrics.extensions.enabled = true
# Apply Micrometer compatibility mode, where instead of regular 'base' and 'vendor' metrics, Quarkus exposes the same 'jvm' metrics that Micrometer does. Application metrics are unaffected by this mode. The use case is to facilitate migration from Micrometer-based metrics, because original dashboards for JVM metrics will continue working without having to rewrite them.
quarkus.smallrye-metrics.micrometer.compatibility = true
# https://download.eclipse.org/microprofile/microprofile-metrics-2.3/microprofile-metrics-spec-2.3.html
mp.metrics.appName = ${broker.component-type-name}

# Use /swagger instead of the default /openapi endpoint to access the openapi definition
quarkus.smallrye-openapi.path = /swagger

# If Swagger UI should be enabled (default is enabled)
quarkus.swagger-ui.enable = true

# Endpoint of the Swagger UI (default is /swagger-ui)
# quarkus.swagger-ui.path = /swagger-ui

# Make Swagger UI also available in production env (be careful !)
quarkus.swagger-ui.always-include = true



